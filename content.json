[{"title":"磁盘格式简析","date":"2019-11-02T03:07:14.000Z","path":"2019/11/02/aboutDisk/","text":"MBR？GUID？GPT？Legacy？UEFI？ESP？NTFS？EXT？FAT？EXFAT？ 这些到底是什么？跟磁盘有关系，有什么关系？我这个业余的家伙聊一聊这些东西到底是什么。 分区格式​ 分区格式是一个很好理解的概念，就是我们常听说的 NTFS、FAT16、FAT32、exFAT等等。它们说是分区格式，其实更应该理解成分区的文件系统格式，因为存放文件依赖于这个格式。 磁盘格式 支持识别的操作系统 备注 NTFS Windows、macOS（支持读）、Linux（支持读） 基本是Windows御用格式，安装Windows必选之一； FAT16 Windows、macOS、Linux 以前常用在U盘上，现在U盘已经转为FAT32，通用性强，但受限大文件存放，单个文件不能大于2GB FAT32 Windows、macOS、Linux 以前常用在U盘上，现在U盘已经转为FAT32，通用性强，但受限大文件存放，单个文件不能大于4GB exFAT Windows、macOS、Linux 不常见，通用性强，单个文件限制（相对于目前单个文件大小）基本被消除，据说有兼容性和文件安全性问题 Ext Linux 很老的Linux文件系统格式 Ext2 Linux 比较老的Linux文件系统格式 Ext3 Linux 有点老的Linux文件系统格式 Ext4 Linux 现在的Linux文件系统格式 HFS/HFS+ macOS macOS 10.13及以前的文件系统格式 APFS macOS macOS 10.14及以后的文件系统格式、HFS/HFS+会被自动转换成APFS 其他… ​ 常见的文件系统格式大致都在上面的表中了，其实界限还是比较清楚，Windows用到的文件格式稍少。服务器操作系统以及Linux用到的文件系统格式还有其他的，这里就不列举了，主要是想说明文件系统是存放文件资料的格式。 硬盘格式类型​ 说起来好笑，可能是我理解的不太对，但是百度百科给的硬盘格式类型竟然是我上面讲的这些。而我接下来要说到的GUID、GPT、MBR竟然被叫做分区格式。难道这个应用在（物理分隔）整个硬盘上的不是硬盘格式？难道上面应用在单个分区上的不是叫做分区格式？？？ ​ 不重要，下面是我对于这些格式的一个理解，以及经常弄混的ESP/EFI以及Legacy做一个我自己的表述。 UEFI启动 传统BIOS/Legacy启动 硬盘格式 必须GPT/GUID（一种格式的两种叫法） 必须MBR 必需分区 ESP分区存放EFI引导，分区格式通常是FAT格式 没有要求，引导通常直接藏在某个主分区里 使用须知 必需主板支持，比较新的引导类型 正常电脑都支持，传统引导方式 ​ 所以可以看到，UEFI/BIOS/Legacy只是一种引导方式的选择，仅仅代表一种方式，并不具体指某种操作。而MBR/GPT/GUID则都代表着，一整块磁盘的基本格式，本身不支持存放文件。需要在划分分区后，格式化为某一种分区类型后才能使用。 ESP/EFI区分​ 这里因为UEFI的特殊性，经常有人分不清ESP和EFI，其实EFI分区和ESP分区本身就是一个东西。都代表的是分区的名字，而不是分区的格式。分区的格式采用的是FAT格式，通用性强。 ​ 而ESP分区的全称叫做EFI System Partition，也就是EFI系统分区，你说是不是就是EFI分区？ ​ UEFI引导的常用引导文件夹名字也是EFI，这就让人很迷糊。其实就是在ESP分区下面有个EFI的文件夹，里面存放着UEFI启动所需要的引导文件。 ​ 还不明白？ ​ 看看这个导图，了解分区与硬盘格式之间的关系，以及ESP分区里的文件结构！ 结尾语​ 我是个小白，理解的有限，只是按照经验和自己的理解写的这篇文章，至今没碰到什么违背我理解的。如果你觉得不对，请不要跟我杠，让我错误下去。欢迎友好讨论，如果是来指点江山的，请您去知乎。","tags":[{"name":"Disk","slug":"Disk","permalink":"https://blog.qiuxiangzhi.top/tags/Disk/"}]},{"title":"为什么建立博客？！","date":"2019-10-26T07:32:13.000Z","path":"2019/10/26/Thinking-One/","text":"​ 我有两个所谓的博客，起初也确实是为了制作自嗨，写一些文章，或吐槽或【生活】分享。现在却变成了一个折腾的东西，这是为什么？我的心路历程？ ​ 其实，最开始，我期望的是可以借由博客 [以新的生活方式] 开始一段新的生活。比如去跑跑步、看看书，学学代码，然后在博客上更新。就像是一个独属于我的 [QQ空间]，但渐渐地不知道为什么这个博客反而成为了制约我去做这些事情的一个东西。 ​ 因为博客的评论，我放弃去晚自习； ​ 因为博客不能搜索，我选择继续寻找主题； ​ 因为博客中代码块样式不好，我开始迁移主题； ​ 因为博客访问人数少，我在群里大力推广； ​ 。。。 ​ 到了最近，我恍然发现，我在干什么？？？ ​ 从记录生活到被生活 / 博客支配，我开始恐惧，开始发现自己原来在逃避，开始彷徨。这么咸鱼的我，怎么能实现自己的那些目标？？？ ​ 我又有什么样的脸去立下那些目标。 ​ 同样的，另一个爱好，macOS，在 PC 上实现完美运行macOS，多么神奇。但回头发现，这些本该早早得到满足并回到正常轨道的爱好，成为了阻扰我继续努力的完美借口与逃避的港口。 ​ 现在我应该做点什么呢？？？ ​ 该清醒去追自己想要的东西了。 ​ 博客依然更新，依旧会折腾macOS，依旧会解答问题，依旧会帮忙， ​ 不会的，是被它支配。 ​ 你好，我是Eternal-Qiu，重新认识一下~","tags":[{"name":"博客","slug":"博客","permalink":"https://blog.qiuxiangzhi.top/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"心情","slug":"心情","permalink":"https://blog.qiuxiangzhi.top/tags/%E5%BF%83%E6%83%85/"}]},{"title":"macOS-PM981安装黑苹果办法","date":"2019-10-19T16:03:39.000Z","path":"2019/10/20/macOS-PM981/","text":"前言​ 我的本子是小米笔记本Pro，买之前只看到了它是15.9mm厚，玻璃屏幕，72色域以及长续航。浑然不觉对一个喜欢折腾电脑的人来说，它的 PM981 和不可更换内存和无线网卡是多么蛋疼。 解决办法​ 查找一番，发现其实很久很久以前，还是 10.12 的时候，就有了相关的补丁可以解决。可惜那篇帖子是求助帖，有一个评论是 TonyMac x86 论坛的一个链接，里面又附了一个链接到 Rehabman 的帖子。然后很多人认为 PM981 无解，赶紧换硬盘。有 PM981 身不由己的则从此远离黑果，其实PM981确实无解，但是可以通过某些办法来达到使用 macOS 的目的。 解决步骤如下👇： 在移动硬盘上安装一个macOS，版本不限（13.6，14.x已经测试通过；评论指出：10.15目前已知打开磁盘管理崩溃），不能为虚拟机。注意安装的磁盘大小最好为你希望在 PM981 上占用的大小； 使用 Paragon Hard Disk Manager 工具进行备份，备份的前提为仅完成安装未进入设置的系统，备份操作很简单，只需要点击 Create Backup 即可； 还原你的系统到PM981上，这一步需要建立一个安装空间，比移动硬盘上macOS稍大一点，用以恢复。 Paragon Hard Disk Manager 会自动恢复分区格式/内容，并且只占用原来备份时的分区大小，多余空间会以空闲空间释放。 关键步骤 在你的移动硬盘或者其他形式的同版本macOS上，输入下面的命令实现空壳驱动的创建： 123456789//创建目录并执行patch_nvme.shmkdir ~/Projectscd Projectsgit clone https://github.com/RehabMan/patch-nvme.git patch-nvme.gitcd ~/Projects/patch-nvme.git./patch_nvme.sh –spoof//在目录下生成一个HackrNVMeFamily.kext后，在这个目录下面可以找到cd ~/Projects/patch-nvme.git 生成一个注入硬件ID的SSDT，其模板如下： 12345678910111213141516171819202122232425262728// Inject bogus class-code for NVMe SSD to prevent IONVMeFamily.kext from loadingDefinitionBlock(&quot;&quot;, &quot;SSDT&quot;, 2, &quot;hack&quot;, &quot;NVMe-Pcc&quot;, 0)&#123; External(_SB.PCI0.RP09.PXSX, DeviceObj) //改我，这里就是地址 Method(_SB.PCI0.RP09.PXSX._DSM, 4) &#123; If (!Arg2) &#123; Return (Buffer() &#123; 0x03 &#125; ) &#125; Return(Package() &#123; &quot;class-code&quot;, Buffer() &#123; 0xff, 0x08, 0x01, 0x00 &#125;, &quot;built-in&quot;, Buffer() &#123; 0 &#125;, &#125;) &#125; External(_SB.PCI0.RP05.PXSX, DeviceObj) //改我，这里就是地址 Method(_SB.PCI0.RP05.PXSX._DSM, 4) &#123; If (!Arg2) &#123; Return (Buffer() &#123; 0x03 &#125; ) &#125; Return(Package() &#123; &quot;class-code&quot;, Buffer() &#123; 0xff, 0x08, 0x01, 0x00 &#125;, &quot;built-in&quot;, Buffer() &#123; 0 &#125;, &#125;) &#125;&#125;//EOF ​ 这里替换的就是硬件的BIOS设备名称，也就是地址信息。这里的BIOS设备名称并不是在BIOS里面查询，而是在Windows 10里边查看。 ​ 右键我的电脑 -&gt; 管理 -&gt; 设备管理器 -&gt; 存储控制器 -&gt; 右键NVME控制器 -&gt; 属性 -&gt; 详细信息 -&gt; BIOS设备名称 ​ 这样填写进去之后，把代码复制到一个新建的 .txt 文本中，然后更改文件格式为 .aml 即可。 接下来的收尾当然是驱动和补丁各自放在各自的位置上，然后根据其他问题调试进系统了~ 联系我QQ：1941256841，加我请注明来意","tags":[{"name":"macOS","slug":"macOS","permalink":"https://blog.qiuxiangzhi.top/tags/macOS/"},{"name":"PM981","slug":"PM981","permalink":"https://blog.qiuxiangzhi.top/tags/PM981/"}]},{"title":"如果微信没给你国旗，自己做一面怎样？","date":"2019-09-26T07:48:43.000Z","path":"2019/09/26/Avator-Wechat/","text":"前言最近比较火的一个现象是，朋友圈的人疯狂艾特微信官方，请求得到一面国旗。 avatar avatar 但这样其实是没有用的，那么我们该怎么办？？？ 小程序？？已经关闭了，而且我试过，这样得到的头像有点模糊。 avatar Python做一个于是想到，Python的图像处理很棒，且微信官方也是这样操作，PS得到的，并不是动态覆盖，这么一来就好办了，就是将国旗图片进行缩放到一定的比例，接着合成。原来的头像： 国旗图片： 逻辑清楚后，直接开干： 这里的库PIL只支持到2.7，所以如果你用的是3.x，那么记得导入Pillow库，一样可以用from PIL import Image 读取图片，分别为国旗图片、待处理的头像图片，记得改成你自己的文件名字flag = Image.open(“flag.png”)avator = Image.open(“IMG_0718.jpg”) 计算缩放比例，以头像图片的宽度为准~缩放到1/2ratio = avator.width / flag.width / 2size = (int(flag.width * ratio), int(flag.height * ratio)) 缩放国旗图片flag = flag.resize(size, Image.ANTIALIAS) 计算坐标，直接套用之前算的坐标就好啦position = (avator.width - flag.width, avator.height - flag.height) 合成图片并保存avator.paste(flag, position)avator.save(“avator.jpg”, “jpeg”) 成果 上面展示的是我微信头像，QQ头像因为有字的原因，加了国旗之后，让国旗失色不少，就放弃了。QQ头像如下： 总的来说，操作还是很简单的，只要把图片放在一个文件夹下，导入Pillow库，更改对应图片名称后点击运行，就得到了我们要的头像。 QQ：1941256841，加我请注明来意","tags":[{"name":"Avator","slug":"Avator","permalink":"https://blog.qiuxiangzhi.top/tags/Avator/"},{"name":"Python","slug":"Python","permalink":"https://blog.qiuxiangzhi.top/tags/Python/"}]},{"title":"如何配置Python学习环境","date":"2019-09-23T12:20:16.000Z","path":"2019/09/23/Python-Settings/","text":"如果你也是在校学生，想学习Python，还没有接触过编程。那么Python的配置就是一个比较小的坎，以及IDE该如何选择，都是一个纠结的小问题。 选择我推荐的Python学习环境是Python3 + jupyter + Pycharm，学C语言的会好奇，为什么要单独安装Python，一般不都集成在IDE里面嘛。但Python是要单独安装，并配置Path环境变量的。当然，如果你是macOS/Linux的话，你要么有更方便的安装方式，要么你不需要我这篇所谓的教程（日常系统是Linux的，一般不愁这种小问题）。 下载安装Python，直接点击官网安装；jupyter，也可以直接点击进入安装方法介绍，一般推荐pip安装；Pycharm，直接点击进入官网下载，建议community版本； 一般来说，你会遇到一个问题，就是jupyter要用pip安装，在CMD命令行下，那么如何安装pip？ 先点击这里下载pip的安装包； 下载下面的包，然后解压安装包，解压完成后，在文件夹下面进入CMD，操作为按住shift，选择在Power Shell中打开，输入CMD，然后输入下面的命令：python setup.py install 安装注意事项需要注意的是，安装Python时，最后一定注意勾选自动安装Path的选项。以及Python安装最好不要更改目录，其他的就只要下一步了，没什么特别的。 如何打开Pycharm/Jupyter？Pycharm双击就可以打开，点击File -&gt; Settings -&gt; Project Interpreter，这是python最为强大的地方，可以导入各种库，实现你的操作，比如我的作业代码里面就导入了numpy、pandas等库。 Jupyter则是一个网页的python工具，它的好处在于实时输出，每行代码都会输出结果，测试很好用。缺点当然是它需要Pip安装各种库，没有库管理器。","tags":[{"name":"Python","slug":"Python","permalink":"https://blog.qiuxiangzhi.top/tags/Python/"}]},{"title":"为了写作业，我写了个Python程序","date":"2019-09-22T06:11:37.000Z","path":"2019/09/22/Modeling-Homework/","text":"题目课堂上老师跟我们讲了这个问题，如何使用Excel进行手动仿真（其实只是讲了一些逻辑而已~）： 某一排队系统，假定顾客随机地分别以1-8min（精度取到分钟）的间隔到达,到达间隔时间值为等概率出现。服务时间为1-6min（精度取到分钟），其出现的概率分别为0.10，0.20，0.30，0.25，0.10，0.05。为了说明问题，这里我们仅仿真10个顾客作为运行长度。并且忽略初始条件的影响。 分析(搬的课件)等概率估算到达时间间隔~顾客到达的时间间隔为1~8分钟，各时间出现概率为等概率，因此，其概率为P(x)=1/8=0.125， x=1,2,3,4,5,6,7,8等概率的问题就是一种均匀分布，可以通过均匀分布随机数的产生来处理。 这里直接使用1000，你们说，这是为什么呢？！ 哈哈哈，当然是因为等精度啦。 不同概率估算服务时间服务时间到达的概率分别为：0.10，0.20，0.30，0.25，0.10，0.05，对应着1-6min，这里的精度只到5%，理论上来说只要20个数字就可以完成随机概率取值。但是为了精度，精度~ 仿真初始条件这里需要预设初始条件，才能进行计算，而初始条件很简单，即第一个顾客的等待时间，开始服务时间，到达时间，到达间隔都为0就是啦。 仿真逻辑仿真逻辑就是下面图示这样子了。 但，作业是这样的老师：咳咳，那个，这个题目很简单了，你们就用Excel手动仿真吧~我们：哦耶，这还不简单？啥都有了，只要重新算一遍，又不复杂，Excel拉公式走起~ 然后，这个时候。。。老师。。。 老师：这样吧，我把条件改一改，就 400 个顾客，然后仿真 100 次吧！！！我们：嗯嗯，好啊，反正只要拉公式。。。慢着，，，你说100次？？？ TM… 真不是人干的活~ 解决方案那没办法，只好请出还没学的 Python 了，操作Excel文件比起 C++ 可友好多了，只是，还没学，咋办呢~ 学！ 这里选用的是 xlsxwriter ，也就是“ xlsx writer ”联合体，专门处理 xlsx 文件，这个得pip install一波。然后还使用到了 pandas ，一个很优秀的数据分析工具，但其实可以不用这个。。。 于是开始码代码（有点点长）： 运行环境：Python 3.7IDE：Pycharm2019.9.23新版更新，增加总体分析统计表输出，并在每一张分表加入分析数据效果如下图片所示： 分析直方图： 分表分析数据：import xlsxwriterimport pandas as pdimport numpy as npimport matplotlib as mplimport matplotlib.pyplot as pltimport os# 创建新的 xlsx 文件，名字记得更改workbook = xlsxwriter.Workbook(&apos;Modeling_Qiu.xlsx&apos;)# 实验次数times = 100# 顾客数量customer = 401# 统计数据，主要收集等待时间，以及每个区间的数量data_flow1 = [[&apos;等待时间区间&apos;, &apos;等待频数&apos;], [&apos;0-0.5&apos;, 0], [&apos;0.5-1&apos;, 0], [&apos;1-1.5&apos;, 0], [&apos;1.5-2&apos;, 0], [&apos;2-2.5&apos;, 0], [&apos;2.5-3&apos;, 0], [&apos;3-3.5&apos;, 0], [&apos;3.5-4&apos;, 0], [&apos;4-4.5&apos;, 0], [&apos;4.5-&apos;, 0]]# 循环创建100个工作表，并输入数据计算for exp in range(0, times): # 等待的顾客数量 wait_customer = 0 # 创建工作表 worksheet = workbook.add_worksheet() # 设置工作表的列宽为20 worksheet.set_column(0, 20, 20) # 设置字体 # format_products = workbook.add_format(&#123;&apos;font_name&apos;: &apos;Times New Roman&apos;&#125;) # 设定整个sheet表的单元格的格式 property = &#123; &apos;font_size&apos;: 16, # 字体大小 &apos;bold&apos;: False, # 加粗 &apos;align&apos;: &apos;center&apos;, # 水平对齐方式 &apos;valign&apos;: &apos;vcenter&apos;, # 垂直对齐方式 &apos;font_name&apos;: u&apos;楷体&apos;, &apos;text_wrap&apos;: False, # 是否自动换行 &#125; cell_format = workbook.add_format(property) # 在向单元格中写入内容时，加上单元格样式 # ws.write(row, col, data, cell_format) # 统计数据，每一张分表的数据 data_flow2 = [[&apos;等待时间区间&apos;, &apos;等待频数&apos;], [&apos;0-0.5&apos;, 0], [&apos;0.5-1&apos;, 0], [&apos;1-1.5&apos;, 0], [&apos;1.5-2&apos;, 0], [&apos;2-2.5&apos;, 0], [&apos;2.5-3&apos;, 0], [&apos;3-3.5&apos;, 0], [&apos;3.5-4&apos;, 0], [&apos;4-4.5&apos;, 0], [&apos;4.5-&apos;, 0]] # 输入数据 df = pd.DataFrame(&#123;&apos;顾客&apos;: [], &apos;到达时间间隔&apos;: [], &apos;服务时间&apos;: [], &apos;到达时刻&apos;: [], &apos;服务开始时刻&apos;: [], &apos;服务结束时刻&apos;: [], &apos;等待时间&apos;: [], &apos;逗留时间&apos;: [], &apos;服务员空闲时间&apos;: []&#125;) # worksheet.write 函数写入第一行列名，参数分别表示行、列、数据、数据格式。 for col in range(len(df.columns)): worksheet.write(0, col, df.columns[col], cell_format) # 生成一个 9 列 customer 行的随机数组 data = [[np.random.randint(0, 1000) for j in range(1, 10)] for i in range(1, customer + 1)] # 处理仿真表格数据 for i in range(1, customer): # 设置行高 worksheet.set_row(i-1, 30) # 顾客序号 data[i-1][0] = i # 顾客到达间隔 if i==1 : data[i-1][1] = 0 else : temp = data[i-1][1] / 125 data[i-1][1] = int(temp) + 1 # 顾客服务时间 if data[i-1][2] &lt; 100: data[i-1][2] = 1 elif data[i-1][2] &lt; 300: data[i-1][2] = 2 elif data[i-1][2] &lt; 600: data[i-1][2] = 3 elif data[i-1][2] &lt; 850: data[i-1][2] = 4 elif data[i-1][2] &lt; 950: data[i-1][2] = 5 else: data[i-1][2] = 6 # 到达时刻 = 到达时间间隔 + 上一次顾客到达时刻 if i == 1: data[i - 1][3] = 0 else: data[i - 1][3] = data[i - 2][3] + data[i - 1][1] # 服务开始时刻 = max（上一次服务结束时刻，本次到达时刻） if i == 1: data[i-1][4] = 0 else: data[i-1][4] = max(data[i-2][5], data[i-1][3]) # 服务结束时间 = 服务开始时间 + 服务时间 data[i-1][5] = data[i-1][4] + data[i-1][2] # 等待时间 = 服务开始时刻 - 到达时刻 data[i-1][6] = data[i-1][4] - data[i-1][3] if data[i-1][6] &gt; 0: wait_customer += 1 # 逗留时间 = 顾客在系统中的时间 = 等待时间 + 服务时间 data[i - 1][7] = data[i-1][6] + data[i-1][2] # 服务员空闲时间 = 本次服务开始时间 - 上次服务结束时间 # 如果 &gt; 0，服务员空闲时间 = 该值 # 其他，服务员空闲时间 = 0 if i == 1: data[i - 1][8]=0 else: if data[i-1][4] - data[i-2][5] &gt; 0: data[i - 1][8] = data[i-1][4] - data[i-2][5] else: data[i - 1][8] = 0 # 统计等待时间频次 if data[i - 1][6] &lt; 0.5: data_flow2[1][1] += 1 elif data[i - 1][6] &lt; 1: data_flow2[2][1] += 1 elif data[i - 1][6] &lt; 1.5: data_flow2[3][1] += 1 elif data[i - 1][6] &lt; 2: data_flow2[4][1] += 1 elif data[i - 1][6] &lt; 2.5: data_flow2[5][1] += 1 elif data[i - 1][6] &lt; 3: data_flow2[6][1] += 1 elif data[i - 1][6] &lt; 3.5: data_flow2[7][1] += 1 elif data[i - 1][6] &lt; 4: data_flow2[8][1] += 1 elif data[i - 1][6] &lt; 4.5: data_flow2[9][1] += 1 else: data_flow2[10][1] += 1 # 最后一行统计数据，累加计算 for j in range(1, 10): data[400][j-1] = 0 for i in range(1, customer): data[400][1] += data[i-1][1] data[400][2] += data[i-1][2] data[400][6] += data[i-1][6] data[400][7] += data[i-1][7] data[400][8] += data[i-1][8] # 最后一行表头，记得改掉 ID data[400][0] = &apos;累加结果&apos; # 生成一个 7 列 2 行的随机数组，作为储存分析表的数据 data_chart = [[&apos;顾客平均等待时间&apos;, &apos;顾客必须等待概率&apos;, &apos;服务台空闲概率&apos;, &apos;平均服务时间&apos;, &apos;平均到达间隔&apos;, &apos;平均等待时间&apos;, &apos;平均花费时间&apos;], [&apos;0&apos;, &apos;0&apos;, &apos;0&apos;, &apos;0&apos;, &apos;0&apos;, &apos;0&apos;, &apos;0&apos;]] # 计算分析表数据 data_chart[1][0] = data[400][6] / (customer - 1) data_chart[1][1] = wait_customer / (customer - 1) data_chart[1][2] = data[400][8] / data[399][5] data_chart[1][3] = data[400][2] / (customer - 1) data_chart[1][4] = data[400][1] / (customer - 1) data_chart[1][5] = data[400][6] / (customer - 2) data_chart[1][6] = data[400][7] / (customer - 1) # 统计等待时间频次 if data_chart[1][0] &lt; 0.5: data_flow1[1][1] += 1 elif data_chart[1][0] &lt; 1: data_flow1[2][1] += 1 elif data_chart[1][0] &lt; 1.5: data_flow1[3][1] += 1 elif data_chart[1][0] &lt; 2: data_flow1[4][1] += 1 elif data_chart[1][0] &lt; 2.5: data_flow1[5][1] += 1 elif data_chart[1][0] &lt; 3: data_flow1[6][1] += 1 elif data_chart[1][0] &lt; 3.5: data_flow1[7][1] += 1 elif data_chart[1][0] &lt; 4: data_flow1[8][1] += 1 elif data_chart[1][0] &lt; 4.5: data_flow1[9][1] += 1 else: data_flow1[10][1] += 1 # worksheet.write 函数写入第一行列名，参数分别表示行、列、数据、数据格式。 for i in range(1, customer+1): for j in range(1, 10): worksheet.write(i, j - 1, data[i-1][j-1], cell_format) # 写入表格 for i in range(1, 3): for j in range(1, 8): worksheet.write(i - 1, j + 9, data_chart[i - 1][j - 1], cell_format) # 写入表格 for i in range(1, 12): for j in range(1, 3): worksheet.write(i + 3, j + 9, data_flow2[i-1][j-1], cell_format) # 测试代码 # print(np.array(data)) # print(np.array(data_chart)) # 工具图片 # my_file = &apos;‪D:/pycode/Pycharm/temp.png&apos; # shutil.rmtree(&apos;my_file&apos;) # if os.path.exists(&apos;temp.png&apos;): # os.remove(&apos;temp.png&apos;)# 开始画图mpl.use(&apos;Agg&apos;)# 图表基本信息font_size = 12 # 字体大小fig_size = (8, 6) # 图表大小# 图例名称names = (r&apos;Times&apos;) # 姓名# 更新字体大小mpl.rcParams[&apos;font.size&apos;] = font_size# 更新图表大小mpl.rcParams[&apos;figure.figsize&apos;] = fig_size# 设置柱形图宽度bar_width = 1.0# 绘制「小明」的成绩data_flow2 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]data_flow3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]index = np.arange(len(data_flow2))for i in range(1, 11): data_flow2[i-1] = data_flow1[i][1] data_flow3[i-1] = data_flow1[i][0]rects1 = plt.bar(index, data_flow2, bar_width, color=&apos;#0072BC&apos;, label=names[0])# 测试代码# print(data_flow1)# X轴标题plt.xticks(index, data_flow3)# y轴范围，最高100，最低0plt.ylim(ymax=100, ymin=0)# 图表标题plt.title(r&apos;Average Waiting Times of Customers, Made by Python&apos;)# 图例显示在图表下方plt.legend(loc=&apos;upper center&apos;, bbox_to_anchor=(0.5, -0.03), fancybox=True, ncol=50)# 添加数据标签def add_labels(rects): for rect in rects: height = rect.get_height() plt.text(rect.get_x() + rect.get_width() / 2, height, height, ha=&apos;center&apos;, va=&apos;bottom&apos;) # 柱形图边缘用白色填充，纯粹为了美观 rect.set_edgecolor(&apos;white&apos;)# 添加数据标签，100次实验数据add_labels(rects1)# 图表输出到本地plt.savefig(&apos;Modling-All-Analyse.png&apos;)# 图片插入到 N5# worksheet.insert_image(&apos;N5&apos;, &apos;times.png&apos;)# 关闭保存workbook.close() Over，大功告成！","tags":[{"name":"Python","slug":"Python","permalink":"https://blog.qiuxiangzhi.top/tags/Python/"}]},{"title":"Guide-如何安装Plant_Simulations 15?","date":"2019-09-16T01:19:57.000Z","path":"2019/09/16/Guide-Install-Plant_Simulations_15/","text":"前言本安装教程，针对（本人班级的）QQ群里的文件制作，其他地方下载的文件还需要将解压出来的vender文件夹，复制粘贴到SolidSQUAD_License_Servers，然后再进行下面的操作： 安装教程开始 安装Plant_Simulation_15，首先需要下载好安装包，我们从群里下载的如图所示： 解压完之后，有这么几个文件夹： 先安装注册许可证信息，进入下面的这个目录，右键install_or_update以管理员运行： 看到最后一张图的信息后，表示注册文件安装完成。接下来我们进行主程序的安装，进入下面这个目录，然后双击setup运行，弹出的第一个窗口选择第一项，不建议更改默认目录。 安装完成后，复制这个文件夹，然后粘贴到安装目录的文件夹下，选择替换： 安装目录默认为：C:/Program Files/Siemens/，如果自己更改了目录，请自己找到这个目录下的这个文件夹。 接下来打开软件，图标如下所示： 选择文件，首选项，打开后选择许可证，输入下面的信息。 点击确定后，重新打开软件，就可以新建2D/3D模型进行仿真了！ 疑问直接下面留言或者QQ问我吧，能知道是什么QQ群的应该有我QQ，不知道也可以看看其他文章，下面都有的哦~ QQ：1941256841，加我请注明来意","tags":[{"name":"Install","slug":"Install","permalink":"https://blog.qiuxiangzhi.top/tags/Install/"}]},{"title":"如何使用Hexo+Github建站（Coding同理）","date":"2019-08-27T01:39:14.000Z","path":"2019/08/27/Hexo-Github/","text":"创建Pages服务这里使用的都是相应的Pages服务，加上hexo工具搭建完成。 所以我们需要首先准备好GitHub/Coding Pages服务环境的搭建，这里推荐我的其他两篇文章： Blog-Gridea与Code Pages：https://www.qiuxiangzhi.top/post/Blog-Code-Guide/ Blog-Gridea与Github Pages：https://www.qiuxiangzhi.top/post/Blog-Github-Guide/ 按照上述操作进行搭建相应的Pages服务，应该不会很难。接下来我们进行hexo的环境配置。 配置Hexo本地环境hexo依托于nodeJs，因此我们需要先建立nodeJs环境。相信之前如果按照上面的步骤配置了相应的Pages服务，此时都已经安装好了Git，如果没有的话，点击这里进去下载安装。 在这里下载安装nodeJs，建议选择LTS，也就是长期支持版。 接下来在git bash里边输入下面的代码，也就是在任意文件处，右键选择Git Bash Here。 11.node -v //查看node版本，验证是否安装成功 在确定好nodeJs配置成功后，我们接下来创建一个博客的本地存放目录，也即一个存放文件夹。 在该文件夹下右键，选择Git Bash Here，输入下面的命令： 1231.npm i -g hexo //安装hexo2.npm -v //验证是否安装成功3.hexo init //初始化你的hexo到你的文件夹 到这里基本上你的hexo本地环境就已经搭建完成了。 搭桥到你的Pages服务，以GitHub为例之前的Pages相关的看第一步的教程，这里不再教学。仅教学如何与你的Pages建立联系。 首先在你的个人Settings（非Repo）中找到New SSH Key，然后title随便填写，key填写下面代码得到的一串SSH。 11.ssh-keygen -t rsa -C \"youremail@example.com\" //这里记得将你的邮箱账号填写进去 然后找到你的id_rsa.pub文件，将里面的复制粘贴进SSH Key中。 如何推送到Pages里推送到Pages里有这么几步工作，但是记得更改下面_config.yml的几项。 1234deploy: type: git repo: https://github.com/YourGithubName/YourGithubName.github.io.git branch: master 这里的YourGithubName应该明白是什么意思吧，就是你的GitHub用户名。 接着回到你的博客所在目录，右键选择Git Bah Here，输入以下代码 12341.hexo clean //不可省略，一般在有重大操作或者换主题时执行此操作2.hexo generate //可使用hexo g代替，是将你的文章或者更改生成静态网页的操作3.hexo server //可使用hexo s代替，是将你的电脑当成服务器，本地端口http://localhost:40004.hexo deploy //可使用hexo d代替，是将本地静态网页文件推送到Pagse里面 如果你在hexo d中出现问题，那么可能是你的deploy工具没有安装，需要执行下面的命令： 11.npm install hexo-deployer-git --save //推送工具 剩下的就是个性化的事情了。 如何更换你的默认主题hexo虽然相比Gridea麻烦，配置起来，修改起来，包括使用起来都如此的麻烦，但是在个性化上是Gridea（目前）远远比不上的。因为hexo的自定义（第三方）主题实在是太多了，而且在接触hexo的时候，也会让你对博客/网站的理解更加深刻。 点击我进入hexo主题商城查看。 每一个主题都会附上各自的使用方法，一般来说按照使用方法进行配置就完全没有问题。 如果碰上了其他的问题，请联系我或者在下方评论。 QQ：1941256841，加我请注明来意","tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://blog.qiuxiangzhi.top/tags/Hexo/"},{"name":"Github","slug":"Github","permalink":"https://blog.qiuxiangzhi.top/tags/Github/"},{"name":"建站","slug":"建站","permalink":"https://blog.qiuxiangzhi.top/tags/%E5%BB%BA%E7%AB%99/"}]},{"title":"Linux-如何安装Ubuntu？","date":"2019-08-07T01:15:04.000Z","path":"2019/08/07/Linux-Install-Ubuntu/","text":"前言Linux是很多人觉得很神秘的系统，我对之了解亦不是很深。但是知晓很多人不知道如何安装一个Linux，这里以Ubuntu为例，教会你安装Linux。 需要准备你需要准备的很简单，只要Windows 环境 + Ubuntu 镜像资源 + （8G）U盘。但有些人总是容易出现意外情况，为了保证Windows系统不会出现问题，我强烈建议没有折腾系统经验的准备好Windows PE。 本文安装全程无图片，需要自己一一对应。 教程环境Windows 10；Ubuntu 18.04；UtrlISO 试用版； 开始 首先进行烧录，烧录建议选择UrtlISO，这是一款老牌软件，试用完全可以烧录完一个Ubuntu。 直接打开软件UtrlISO，选择试用，接着文件-&gt;打开，选择你的镜像文件。 打开之后，选择启动-&gt;写入硬盘镜像，剩下的基本默认就可以。多说一句，其他的教程中有说这里写入方式的问题，但是我默认写入也没有出现过问题。 烧录完成之后，我想接下里你应该去找到你的BIOS启动键，进入BIOS设置一些基本的选项。如Security-&gt;Disabled，最好选择UEFI Boot。 接着直接进入Ubuntu Install，我们的目的就是安装Ubuntu，因此就不Try without Install了。 安装Ubuntu的过程中，键盘布局，语言/地区选择，这些我想都不会成为你的困扰。 开始需要指导的地方是，更新和其他软件这里。凭个人喜欢选择了，完全没有折腾系统经验的建议正常安装。 正常安装：有Ubuntu自身的办公软件、游戏、多媒体播放器，但未必适合我们大陆；最小安装：仅包含浏览器和基本工具； 12341|//不过记得勾选上下面的为图形或无线硬件，以及其他媒体格式安装第三方软件。2|//图形：显卡驱动3|//无线硬件：蓝牙/WIFI4|//媒体格式：音乐/视频播放器 接下来一个非常重要的地方就是分区问题了，新手常常会被这里搞得一头雾水。就算是经常安装Windows的老手，也会觉得无从下手。这是因为Windows和Linux的分区不太一样，Linux的分区比较灵活，用途比较专一。 下面是Ubuntu各个分区的描述： 分区 分区类型 分区格式 分区大小 分区解释 / 主分区 Ext4日志文件系统 10GB 相当于Windows的C盘，安装系统与软件 /swap 逻辑分区 交换空间 2GB 相当于Windows上的虚拟内存 /boot 逻辑分区 Ext4日志文件系统 200MB 200MB足够，启动分区，包含启动文件 /home 逻辑分区 Ext4日志文件系统 3GB 用户的home目录所在分区 /tmp 逻辑分区 用于存放临时文件，对于多用户或者网络服务器来说非常必要 /usr 逻辑分区 用于存放软件，尽量大，但Linux程序一般比较小，最多10GB 123450|注意：1| 不管如何，/boot 分区的200MB足以；2|/home 分区与 / 分区你可以随意按照你的想法分配；3|/swap 分区应该按照你自己内存的大小设定，若内存比较大，则建议设置小一点，内存小，则建议尽量达到内存大小；4|很重要的一点是，引导分区所在千万不要选错了磁盘（如果有两块磁盘）， 剩下的安装过程中，已经没有了能让你感到疑问的东西。即便是电脑小白，只要懂中文（如果你不懂中文，那还是从头学语文吧，人教版等着你）。 再说几句Linux的操作不像是Windows那么直观，所以你可能会觉得，这玩意怎么那么难用，幸运的是，Ubuntu的知名度比较高。这就使得大部分国产软件，诸如QQ，Tim，阿里旺旺，百度网盘，网易云音乐，WPS等都可以找到办法安装。 但Ubuntu的体验并不是最好的，它有很多缺点，即使是LTS版本。比如不够完善的包（软件的依赖问题）管理，比如时不时的报错，比如仍然很依赖于命令行。 对于新手小白，我其实更加推荐其他两个Linux去体验Linux命令行+桌面体验。Linux命令仅用于高端操作，桌面可以像是Windows一般，安装好常用的软件，直接轻松使用。 这两个Linux是Deepin与Manjaro，前者基于Debian，号称最稳定的Linux；后者基于Arch，号称生态最丰富/包管理最出色的Linux。且都是对新手小白及其友好，前者将桌面国产化得很适合办公。建议新手小白从Deepin开始入手。 如何联系我？学C++/博客可加我QQ：1941256841玩黑苹果/Linux入群讨论：706372078QQ：1941256841，加我请注明来意","tags":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"https://blog.qiuxiangzhi.top/tags/Ubuntu/"},{"name":"Linux","slug":"Linux","permalink":"https://blog.qiuxiangzhi.top/tags/Linux/"}]},{"title":"C++学习日记三","date":"2019-08-06T09:07:30.000Z","path":"2019/08/06/C++_Learning_Third/","text":"前言C语言学习日记是博客主人学习C++的笔记，可供各位一同参考。该系列会一直更新到学完为止，有想学C++的同学也可以联系我一起学习。 期间若希望博客主人更新其他类型的文章，可以联系我。 这个系列的风格将会是，不多BB直接上笔记。 一维数组 //定义初始化char name[30];//定义名字为name的，空间为30的一维数组//可以使用变量用于定义define N 50int N=50;char name[N];//运行均没有错误 二维数组冒泡排序算法 int i, j, exchange, sum[30];for( i=0 ; i&lt;30 ; i++){ for( j=i ; j &lt; 30 ; j++){ if (sum[i]&lt;sum[j]){ exchange=sum[i]; sum[i]=sum[i+1]; sum[i+1]=exchange; } }} 如何联系我？学C++/博客可加我QQ：1941256841玩黑苹果/Linux入群讨论：706372078QQ：1941256841，加我请注明来意","tags":[{"name":"C++","slug":"C","permalink":"https://blog.qiuxiangzhi.top/tags/C/"},{"name":"学习日记","slug":"学习日记","permalink":"https://blog.qiuxiangzhi.top/tags/%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/"}]},{"title":"C++学习日记二","date":"2019-08-06T08:00:13.000Z","path":"2019/08/06/C++_Learning_Second/","text":"前言C语言学习日记是博客主人学习C++的笔记，可供各位一同参考。该系列会一直更新到学完为止，有想学C++的同学也可以联系我一起学习。 期间若希望博客主人更新其他类型的文章，可以联系我。 这个系列的风格将会是，不多BB直接上笔记。 常见运算符 算数运算符：+ - * / %赋值运算符：=复合运算符：+=，-=，*=， /=，%=关系运算符：&gt;, &lt;, &gt;=, &lt;=, ==逻辑运算符：&amp;&amp; 并且；|| 或； ！非；位运算符：&amp; 按位与；| 按位或；~ 按位非；^ 按位异或；&lt;&lt; 左移；&gt;&gt; 右移； 位运算中按位非 ~ //位运算使用二进制，运算完后，转换成十进制输出，每一个数位都进行转换//如：~2//由00000010-&gt;11111101-&gt;11111100//第一位为数位，如果为负，则+1；//输出：-3 布尔变量：bool, true/false 1|bool flag = true;2|cout &lt;&lt; boolalpha;//让布尔变量以true/false的形式输出3|cout &lt;&lt; (14&gt;23) &lt;&lt; endl;4|//输出结果：false 左移/右移 cout &lt;&lt; 3; //重载，作用发生变化//左移即在转成二进制后，进行左移位数//如 2 &lt;&lt; 3; //左移//则2 = 00000010 -&gt; 00010000 -&gt; 16//用于处理二进制数字，2的倍数，效率高 计算数据类型占用内存空间大小 sizeof(type_name)结果以字节为单位如：sizeof( int )，sizeof(‘ \\n ‘)输出：4，1 运算符优先级 cout &lt;&lt; ! ( ( 18 + 45 % 3* 5)&gt;16 ) &lt;&lt; endl;输出结果：true（1）正常逻辑，没有什么特别的 三元运算符 “ ? : “ 1|int num =5 &gt; 6 ? 10 : 12;2|cout &lt;&lt; num;3|//中文解释：5大于6吗？若为真则为10，否则为12。4|//输出：12 if结构 1|if( true ){2| //coding part 1;3|}4|else{5| //coding part 2;6|} switch结构 1|switch( ture ){2| case 常量1:3| //coding part;4| break;5| case 常量2:6| //coding part;7| break;8| case 常量n:9| //coding part;10| break;11| default:12| //coding part;13| break;14|} while循环 1|while( 判断条件 ){2| //代码块;3| //循环变量;4|} do while循环 1|do {2| //循环变量;3| //循环代码块;4|}while( 循环结束条件 ) for循环 1|for( 初始条件 ; 结束条件 ; 循环变量 ){2| //代码块3| //break，用于跳出循环4| //continue，用于跳过该次循环5|} 如何联系我？学C++/博客可加我QQ：1941256841玩黑苹果/Linux入群讨论：706372078QQ：1941256841，加我请注明来意","tags":[{"name":"C++","slug":"C","permalink":"https://blog.qiuxiangzhi.top/tags/C/"},{"name":"学习日记","slug":"学习日记","permalink":"https://blog.qiuxiangzhi.top/tags/%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/"}]},{"title":"C++学习日记一","date":"2019-08-06T02:26:14.000Z","path":"2019/08/06/C++_Learning_First/","text":"前言C语言学习日记是博客主人学习C++的笔记，可供各位一同参考。该系列会一直更新到学完为止，有想学C++的同学也可以联系我一起学习。 期间若希望博客主人更新其他类型的文章，可以联系我。 这个系列的风格将会是，不多BB直接上笔记。 标准结构 1|#include 2|using namespace std3|int main(){4| cout &lt;&lt; “!!!Hello World!!!” &lt;&lt; endl;5| return 0;6|} 得到用户输入的单个字符1|getchar() 输入获取字符串1|cin.get() 输出标准格式1|cout &lt;&lt; &quot;&quot; &lt;&lt; endl 数据类型 数值类型int / short / long / long long / bool ( true/false ) / char( 8 bit ) /char 16_t / char32_t / float / double / long double非数值类型string 衡量长度类型 sizeof( );example: sizeof( float )sizeof( 3.14f ) 单精度浮点型/双精度浮点型精度问题 float numFloat = 10 / 3.0;//默认显示6位数字，前后一共6位double numDouble = 10 / 3.0;//默认显示6位数字，前后一共6位 cout &lt;&lt; fixed; //让浮点型固定以数字的形式显示cout &lt;&lt; setprecision(2);//控制显示的小数位数 设置控制台标题 #include &lt;windows.h&gt;setConsoleTitle( 学习C++ ); 文档注释 /** 伤害 */double value_attack =57.88 格式： /** 注释值 */ char用法 char ch;int num;cin &gt;&gt; num;cin &gt;&gt; ch;//用户输入123abc，结果会是什么？//结果是123，a//这说明，char是单个字符，不能存储字符串，并且cin读取的是缓冲区中的内容 string用法，字符串类型名 string str = “Hello World!”;cout &lt;&lt; str; typedef，用于给数据类型起别名 typedef int sum;sum sum1=50;//两种定义方式int sum2=50;//是等价的 输出格式对齐 1|double attack1=232;2|double attack2=234;3|double attack3=879;4|cout &lt;&lt; left; //左对齐5|cout &lt;&lt; setfill(‘*’); //空白字符填充6|cout &lt;&lt; setw(8) &lt;&lt; attack1 //对字符类型设置输出宽度7| &lt;&lt; setw(8) &lt;&lt; attack28| &lt;&lt; setw(8) &lt;&lt; attack3 &lt;&lt; endl; 算数运算符 1|int num1 = 5, num2 = 2;2|cout &lt;&lt; num1 + num2 &lt;&lt; endl;3|cout &lt;&lt; num1 - num2 &lt;&lt; endl;4|cout &lt;&lt; num1 * num2 &lt;&lt; endl;5|cout &lt;&lt; num1 / num2 &lt;&lt; endl;6|cout &lt;&lt; num1 % num2 &lt;&lt; endl;7|//取模运算时，不带入被模数的符号，只看模数，本例中只看num1的符号 模数的用法 //1.用来取某一个数字的某一个位数//如123373 % 10//2.可以计算时间，多少分钟是多少个小时，多少个分钟，或者是多少月的第几天//如1945一年中的第345天是哪月哪天 类型转换 1|int num1 = 5, num2 = 2;2|double num3 = num1 / num2;//自动类型转换3|cout &lt;&lt; num3; //结果为24|5|num3 = (double)num1 / num2;//强制类型转换6|cout &lt;&lt; num3; //结果为2.5 如何联系我？学C++/博客可加我QQ：1941256841玩黑苹果/Linux入群讨论：706372078QQ：1941256841，加我请注明来意","tags":[{"name":"C++","slug":"C","permalink":"https://blog.qiuxiangzhi.top/tags/C/"},{"name":"学习日记","slug":"学习日记","permalink":"https://blog.qiuxiangzhi.top/tags/%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/"}]},{"title":"macOS-如何驱动核显/卡FramBuffer？","date":"2019-08-05T01:17:20.000Z","path":"2019/08/05/macOS-IntelFramBuffer/","text":"前言如果你的核显显存只有7M，那么你的macOS体验绝对是无比糟糕的。那么，我们应该怎么解决呢？ 警告请注意，本贴只做技术与学习探讨，不做任何商业和违法用途。同时请各位在实践学习后，于24小时内自行消除。 可能涉及到的法律问题：macOS1014； 如果您是非个人用户或用作商业用途，您应该观看上述材料中所提及问题，并不要接触实施下述操作。 问题详述核显是一个可以说看起来很麻烦，也可以说超级简单的驱动。如果脸不黑，一般直接进去系统直接可以驱动核显，顺便说一句，我一直都是开核显安装，没出过事。 但是macOS1014-Mojave中，对于DVMT-Preallocted的要求变高了，要求该项值至少64MB，该项是BIOS中的设置。 对于不少人来说，这项在BIOS中是默认隐藏的，这让人很烦恼。 macOS 10.13对此的解决办法是一个补丁，该补丁在10.14失效，并且每一个版本都不尽相同。该解决方案的替代办法就是HackInTool，该工具的详细使用教程（来自黑果小兵Blog，侵删）。 解决办法幸好，解决方案不需要看这么多东西，只要照着下面的操作进行即可。 一般而言，你的问题应该出在config.plist中，Intel的ig-platform-id是0x12345678或者空白。这种情况下，你的/CLOVER/Kext/other/中会有一个WhatEverGreen.kext。 你可以进行如下几种操作： 1.直接去掉ig-platform-id中的值，保存config后重启； 2.去掉ig-platform-id的值后，如果进不了系统了，那么你应该将ig-platform-id改回0x12345678。然后下载HackIntool，再进行如下操作： ①通过菜单项：缓冲帧选择 macOS 10.13.6 / macOS 10.14； ②选择显卡对应的处理器架构； ③点击应用补丁按钮，在通用选项中勾选设备/属性，自动侦测变化，全部，接口，显存这几个选项； ④在高级选项中勾选DVMT pre-alloc 32 MB，显存 2048MB，禁用 eGPU，启用HDMI20(4K)，将DP 映射到 HDMI，FB 端口数限制； ⑤勾选设备，选择平台 ID 相对应的 设备 ID，这通常跟你的显卡名称相吻合； ⑥点击生成补丁生成显卡驱动补丁； ⑦通过菜单项：文件 ▸导出 ▸ Config.plist，将该补丁直接注入到 Clover 的配置文件 Config.plist 中； 3.如果上述操作后，仍然不能解决你的问题，那么你需要检查如下几个地方： ①macOS 10.14？如果不是macOS 10.14，那么你有更好的解决方案，可以直接使用旧版本补丁。一般下载好的镜像自带配备好这个驱动的EFI，不建议直接替换原有EFI。 ②/CLOVER/Kext/other/有我提到的WhatEverGreen.kext这个驱动。没有的话，是无法达到修改Frambuffer的目的。 ③如果还是无法驱动，或是出现了驱动后黑屏，那么也许你需要仿冒ID，出现黑屏情况比较多的是HD630，UHD630这两款显卡。你需要去找找相关的教程，幸运的是，我也碰到了这个问题，所以你可以去看看这个我的经验贴：PM981的黑屏之旅。 联系我百度贴吧：我傻你有意见啊远景ID：qiuxiangzhiQQ：1941256841，加我请注明来意","tags":[{"name":"macOS","slug":"macOS","permalink":"https://blog.qiuxiangzhi.top/tags/macOS/"},{"name":"核显","slug":"核显","permalink":"https://blog.qiuxiangzhi.top/tags/%E6%A0%B8%E6%98%BE/"},{"name":"FramBuffer","slug":"FramBuffer","permalink":"https://blog.qiuxiangzhi.top/tags/FramBuffer/"}]},{"title":"macOS-如何使Siri发声","date":"2019-08-05T00:54:15.000Z","path":"2019/08/05/macOS-Siri/","text":"前言Siri作为智障代表，虽然没有实用价值，但是有它还是会感觉自己的macOS又更像是那么一回事了。下面，我在这唠叨一下如何使你的Siri工作起来，方法很简单，哪里都可以搜索到。 警告请注意，本贴只做技术与学习探讨，不做任何商业和违法用途。同时请各位在实践学习后，于24小时内自行消除。 可能涉及到的法律问题：macOS1014； 如果您是非个人用户或用作商业用途，您应该观看上述材料中所提及问题，并不要接触实施下述操作。 前提你的/CLOVER/config.plist，然后在机型参数设置/SMBIOS中，SmUUID这一项是空白的，如果不是，可按照教程尝试，但不保证效果。 操作只要打开你的/CLOVER/config.plist，然后在机型参数设置/SMBIOS中，将SmUUID这一项，填充即可。 uuid本身可以有两种生成办法，一是直接在终端输入：uuidgen生成。然后将生成的的uuid复制进去，并确保其他的所有信息都是完整的。 二则是直接点击Clover Configurator中的魔术棒，选择机型后，软件自行生成所有信息。 保存后即可重启，查看Siri是否正常工作。若仍不正常工作，确保你的网络是可用的，声卡已经被驱动。 声卡工作不正常，请看macOS-声卡驱动。 联系我百度贴吧：我傻你有意见啊远景ID：qiuxiangzhiQQ：1941256841，加我请注明来意","tags":[{"name":"macOS","slug":"macOS","permalink":"https://blog.qiuxiangzhi.top/tags/macOS/"},{"name":"Siri","slug":"Siri","permalink":"https://blog.qiuxiangzhi.top/tags/Siri/"}]},{"title":"C++初步认识","date":"2019-08-01T03:45:42.000Z","path":"2019/08/01/C++_Install-Guide/","text":"前言一个标准的学习过程应该从 HelloWorld.exe 开始，初步代码如下#include &lt;iostream&gt;using namespace std; int main(){ cout &lt;&lt; &quot;!!!HelloWorld!!!&quot; &lt;&lt; endl; return 0;} 当然，学习任何一门语言之前都应该要准备好学习环境。 我选择使用 Atom + MinGW 来编译和执行 C 及 C++ 语言。 配置首先下载： MinGW官方资源； Atom软件环境； 以及一些提升使用体验的插件。 然后，你首先安装并打开 MinGW Installation Manager ，然后勾选 Basic Setup 中这几项，选择 Insatllation ，接着 ApplyChanges 。如我下面的图所示： 接下来，如果你没有改变上述软件的安装位置，右键我的电脑/此电脑，选择属性，高级系统设置，高级，环境变量，用户变量中的 Path 中加上下面这个路径。 C:\\MinGW\\bin 如果是Windows 7用户，那么自行查找相关配置办法。 Atom 插件插件位置在 File-&gt;Settings-&gt;Install 查找，需要的插件有 gpp-compiler 。 编译执行可以复制我所写的 HelloWorld 代码，放在编辑框内，尝试按快捷键 F5 / Fn+F5 运行。 学习&amp;资源关于如何学习C++，我认为比较好的方式是，网课 + 项目实操。当然，在执行项目时经常会碰到难以解决的问题，这个时候一个论坛就必不可少了。下面是我的推荐： 网易云课堂的《老九课堂：C++学习》C语言论坛 联系我百度贴吧：我傻你有意见啊远景ID：qiuxiangzhiQQ：1941256841，加我请注明来意","tags":[{"name":"C++","slug":"C","permalink":"https://blog.qiuxiangzhi.top/tags/C/"},{"name":"Atom","slug":"Atom","permalink":"https://blog.qiuxiangzhi.top/tags/Atom/"}]},{"title":"Blog-Gridea与Code Pages","date":"2019-07-26T15:41:56.000Z","path":"2019/07/26/Blog-Code-Guide/","text":"对于想要在网上有自己的一个博客网站的人来说，常用的有 Wordpress、Typecho 这些免费搭建工具。但是对一些小白来说，需要接触到域名、空间购买、数据库设置这些，还是有些难度的。在前段时间，偶然在网上发现了这个Gridea工具。Gridea 是 一个基于Github Pages 和 Coding Page 静态博客管理工具。我被它简洁清新的界面所吸引，于是先将博客迁移到 Github上，但是由于 Github 服务器在国外的原因，国内访问还是有点慢的，于是又将博客迁移到了 Coding Page 上，下面介绍一下搭建的过程。 Gridea 介绍参照官方：https://gridea.dev/ Coding Page介绍Coding Pages 服务是 http://Coding.net 推出的免费静态网站托管服务,拥有自定义域名,免费 SSL 证书等特性。目前已经被腾讯收购。 准备工作下载安装Git官方下载地址：https://git-scm.com/downloads 下载安装Gridea目前最新版本是v0.81 Github下载地址：https://github.com/getgridea/gridea/releases，选择最新版下载即可，由于Github下载比较慢，下面我给出一个百度网盘下载地址。 百度网盘下载Mac版： 网盘地址 提取码：als7windows版：网盘地址 提取码：4v8q 注册腾讯云开发者平台帐号注册腾讯云开发者平台帐号，使用微信扫码登录即可。 修改用户名点击个人设置，修改用户名，用户名会显示在博客地址中，默认博客地址是”http://用户名.coding.me”,默认的用户名太长，展现不合适,所以要修改一下。其它的绑定手机、邮箱、密码这些也可以设置一下。 可以自定义用户名 还有邮箱、密码这些。设置完上面这些信息后，就可以开启开始开启Page了。 开启Page服务点击加号新建项目，项目名称自己自定义：eternal（这里最好填用户名）,项目地址点击后自动填充，项目描述可以随便填，选择git仓库，公开源代码，勾选启用 README.md 文件初始化项目，然后点击新建项目。 点击 Page 服务，开启 Page。 点击我已阅读后，一键开启 page 服务。 显示Page服务运行中，则证明Page服务已经开启成功了。现在博客地址是http://你的用户名.coding.me/，后面你也可以在设置中绑定自己的自定义域名。开启https。点击设置，选择强制开启https. 绑定自定义域名。如果没有自己的域名，这一步可以略过。首先给自定义域名添加解析，见官方文档https://coding.net/help/doc/pages/domain.html然后在开发者平台上绑定已经解析的自定义域名, 看到状态显示正常了，就说明已经绑定成功了。可以用新的域名来访问博客了。 新建访问令牌接下来新建一个访问令牌，后面配置Gridea的时候需要使用。在个人中心中找到访问令牌后新建。 权限全选上后，勾选创建令牌。 输入密码，密码在个人中心所设置的。 创建完成后复制令牌信息，保存好，后面配置的时候要用。 开始配置Gridea博客基础配置按照图中说明配置好相关参数，然后点击保存，保存成功后再点击检测远程连接，显示远程连接成功的话，就表示客户端可以连接我们的博客啦。 点击预览，就可以本地查看我们的博客了，或者此时点击同步，我们也可以看到博客内容已经上传了。 接下来我们要进行博客的设置 菜单配置现在我们点击菜单，会显示404，我们要对菜单进行初始化首页：点击选择homepage后保存。归档选择Archves,标签选择Tags,关于选择关于。然后点击同步，这样我们的菜单就都能点击了。 Favicon配置自己配置即可 头像配置自己配置即可 主题配置Gridea自带了4款主题，你可以自己选择使用，还有其它的自定义配置，你可以尝试设置。也有主题市场可以选择，目前还比较少。 配置评论Gridea 目前提供了 Gitalk 和 Disqus 两种评论系统支持。Gitalk 是一个基于 GitHub Issue 和 Preact 开发的评论插件。如果你博客使用的是 Gitalk 的话，建议你可以选择 Gitalk 来作为评论插件。你可以按照 Gitalk 的文档 进行相关字段配置，或者按照下面的步骤操作。首先你需要有一个 Github帐号，建立一个Github仓库用来放评论。 然后需要有一个 Github OAuth Application，点击这里创建。 创建完成后可将「Client ID」和「Client Secret」复制一下，保存到本地。接下来就可以去应用里面填写对应的信息，并开启评论,保存并同步。 此时打开博客，页面下方评论会显示要求初始化，这个时候使用Github帐号登录一下就行了。 联系我百度贴吧：我傻你有意见啊远景ID：qiuxiangzhiQQ：1941256841，加我请注明来意","tags":[{"name":"Blog","slug":"Blog","permalink":"https://blog.qiuxiangzhi.top/tags/Blog/"},{"name":"Code Pages","slug":"Code-Pages","permalink":"https://blog.qiuxiangzhi.top/tags/Code-Pages/"}]},{"title":"Blog-Gridea与Github Pages","date":"2019-07-26T15:10:29.000Z","path":"2019/07/26/Blog-Github-Guide/","text":"当下大多数人可能已经对 Github Pages 不再陌生，它是很多喜欢写文章的人第一次接触的用于免费搭建博客建一个简洁却又不失优雅的个人博客 ，直到现在互联网上还有大量的基于它的个人博客，也有大量的搭建方法的教程。 然而搭建虽然简单，但是管理和推送文章却相对麻烦不少，在官方的教程里，我们需要经历繁琐的步骤才能发布一篇文章和修改个人空间界面。 使用 Gridea 在 Github Pages 上搭建静态博客Gridea 是一个基于 Github Pages 和 Coding Pages 的静态博客管理工具。相较于官方提供的 GitHub Desktop 或在终端使用 Git 的方法管理，Gridea 这款工具则更为的便捷和优雅，它能让作为创作者的你更专注于写作 。Gridea 官网：https://gridea.dev/ 配置Gridea 最早叫 Hve Notes ，开发者为了更易读和好记，重新命名为 Gridea ，支持 Windows 和 Mac 平台，它的基础界面非常地小清新。 第一次使用它需要你进行应用的初始化配置，才能让他和 Github Pages 连接，配置很简单，可以参考下面的方法进行配置： • 域名：Github Pages 对应的域名（例如：https://eternal0527.github.io 或 http://moyu.com）• 仓库：你的静态文件存放的仓库（例如：Eternal0527.github.io）• 分支：你的 Github Pages 对应的分支（例如：master）• 用户名：仓库所属用户的用户名（通常就是你的 Github 账号的昵称）• 邮箱：Git 推送时使用的邮箱（通常就是你的 Github 账号的邮箱）• Token: Git 推送时需要的 Token，用来向 Github 提交构建后的文件 Github personal access tokens• CNAME: 可通过这个选项配置你自己的域名（例如：qiuxiangzhi.top） 为了让大家更方便地对应上每个配置具体要填的内容，这里我把 Github Pages 对应的字段也标识出来（为了避免出现一些奇怪的问题，最好按照官方的规范创建 Github Pages）。 这里有个安全上的小 Tip，我们在创建 Personal access tokens 的时候，只需要赋予 repo 的权限即可，这样最大程度减少 Token 出现泄漏后可能造成的安全风险。 美化配置完成后，先测试远程连接是否正常，没有问题的话 Gridea 就成功和 Github Pages 连接上了。我们再重新回到主界面，点击左下角的同步，就可以将我们的文章同步到个人博客了，试试访问你定义的域名来看看网站的效果。 接下来我们可以自定义一些配置让博客的功能更完善和美观，在配置界面里，我们可以配置博客的评论系统，目前 Gridea 支持 Gitalk 和 Disqus，在这里就不详细介绍如果配置评论系统，有需求的同学可以查看作者给出的小白教程，同样我们也可以修博客的 Favicon 和头像。 Gridea 也提供了博客的主题设置，我们可以选择自己心仪的主题，目前 Gridea 内置了 4 款主题 ，分别是 Notes、Simple、Fly、Paper。 更多主题大家可以参考：https://gridea.dev/themes/ 大家也可以根据自身的需求修改网站名称、底部信息等其他内容。 写作Gridea 支持 Markdown 语法并且最新的版本也支持了 Katex 公式，对于一个普通的写作者来说，他能满足最基本的写作需求，在文章的创作界面中，作者为了写作的方便，也提供了一些基础 Markdown 语法的快捷操作，如插入代码块、插入链接、插入图片，改变字体等等，通过点击那些显而易见的图标帮助提升你的写作速度节约你的时间。 在写作界面的右边栏里，我们可以给文章命名一个好记的 URL、选定一个相关主题的标签、修改文章的创建时间或者给我们的文章配一个贴切的封面图。 其中列表中隐藏功能可以让你的文章，在列表中处于一种不被上传的状态，具体使用场景是什么样的呢？比如，如果你的一篇文章只创作了一半，你不想让他出现在你的 Blog 中，但你又修改了其他的文章的内容需要同步到你的 Github Pages 上，那么你可以先将你的文章在列表中隐藏，这样这篇文章就不会被同步，而已经修改过的文章则会照常同步上去。 这个人性化的功能也方便你更好的管理你的文章，可以隐藏掉一些文章却不需要删除他们，对于习惯了自己的Markdown编辑器的人来说，我们也可以把创作好的文章移动到 Gridea 的文章目录中，在 Mac OS 的路径是 Document/Gridea/posts，总之我们可以根据自己的喜好来选择写作方式。 使用 Gridea 在 Coding Pages 上搭建静态博客在上面我们演示了如何使用 Gridea 在 Github Pages 上搭建静态博客，但是由于 Github 服务器在国外的原因，国内访问还是有点慢。 这里我们就来介绍下如何在 Coding Pages 上搭建的过程。在 Coding Pages 搭建静态博客的方法和 Github Pages 上过程比较类似，为了不重复造轮子，你可以直接参考使用 Gridea 和 Coding Pages 搭建静态博客 一文。 总结Gridea 是一款麻雀虽小却五脏俱全的静态博客写作客户端，它能让你告别繁琐的 Git 操作，更加快速方便地管理你的个人博客，同时他恰到好处的主题和实用的配置功能也能一定程度上帮助你美化博客。 如果你的动手能力够强，甚至可以自己动手创作主题。作为一款免费的工具，如果你有任何的建议都可以去官方的项目页面进行反馈，或者加入作者的 Telegram Group 根据目前的版本迭代速度看，作者还是非常勤劳的，期待未来有更多的新鲜功能。 联系我百度贴吧：我傻你有意见啊远景ID：qiuxiangzhiQQ：1941256841，加我请注明来意","tags":[{"name":"Blog","slug":"Blog","permalink":"https://blog.qiuxiangzhi.top/tags/Blog/"},{"name":"Github Pages","slug":"Github-Pages","permalink":"https://blog.qiuxiangzhi.top/tags/Github-Pages/"}]},{"title":"macOS驱动-声卡驱动","date":"2019-07-22T12:58:40.000Z","path":"2019/07/22/macOS-Audio/","text":"前言作为影响macOS体验的三卡之一，声卡是与人交互的一个重要维度，也是一个能让你体会到macOS对硬件优化的一个点。本篇文章旨在教学如何驱动常见普通声卡。 警告请注意，本贴只做技术与学习探讨，不做任何商业和违法用途。同时请各位在实践学习后，于24小时内自行消除。 可能涉及到的法律问题：macOS1014； 如果您是非个人用户或用作商业用途，您应该观看上述材料中所提及问题，并不要接触实施下述操作。 驱动方法一：万能驱动，自动识别节点第一种驱动方法很简单，但在使用上不是那么的便利。所以这里推荐新手小白和台式机（节点多，识别方便）用户使用。 驱动的过程也很简单，只要把VoodooHDA.kext这个文件放入EFI/CLOVER/Kext/Other/，就像下图所示，接着删除AppleAlc.kext文件（也可以像我一样备份）。 该操作可在macOS也可在Windows环境下完成。 驱动方法二：仿冒驱动，套用预置节点第二种方法则比较麻烦一点，但基本步骤不变。 驱动需要AppleAlc.kext文件，删除VoodooHDA.kext这个文件，同样放入EFI/CLOVER/Kext/Other/中（也可以像我一样备份）。 与前一种方法不同的点在于你需要设置（输出ID）Layout ID，一般声卡常见ID见下图（来自QQ群：706372078）。 你的声卡一般会对应多个ID，至于哪些/哪个可以用，你需要更改config中的此处后进行重启实验。 驱动方法三：定制驱动，自行定义节点第三种方法是备用的，第二种方法是用别人所制作好的预置节点实验是否与你的节点一致。如果幸运，可以碰到内置的节点与你的声卡输出节点完全一致。 如果试遍了Layout ID，还是不能以第二种方式驱动你的声卡，且不能忍受第一种方式所带来的一些小问题。那么你可以尝试下面的进阶操作： 定制声卡之旅，耐心与技术交织前进的道路！（链接自远景ID：guoyan6914685，简书ID：LF落风，侵删） macOS下操作使用Clover Configurator这款软件，选择挂载分区（Mount EFI Partition），然后进入目录操作即可。推荐你跟我一样，下载这里的中文版Clover Configurator。 Windows下操作使用DiskGnius软件可以实现ESP分区的读取，以右键复制，Ctrl + V的方式粘贴到上述提到的目录中。值得一说的是，这里的kext是以文件夹形式呈现的。图片参见小白入坑。 联系我百度贴吧：我傻你有意见啊远景ID：qiuxiangzhiQQ：1941256841，加我请注明来意","tags":[{"name":"macOS","slug":"macOS","permalink":"https://blog.qiuxiangzhi.top/tags/macOS/"},{"name":"声卡","slug":"声卡","permalink":"https://blog.qiuxiangzhi.top/tags/%E5%A3%B0%E5%8D%A1/"}]},{"title":"macOS驱动-电池补丁","date":"2019-07-16T02:45:23.000Z","path":"2019/07/16/macOS-Batttery/","text":"前言对于笔记本用户而言，黑苹果让人烦恼的事情有四大件，显卡、电池、声卡、无线网卡，这里面每一项的缺失都严重影响体验。而显卡驱动通常情况下比较简单，声卡只要有对应Layout ID轻而易举，无线网卡要么可以驱动要么直接不行，只有电池是可以驱动但却要修改DSDT。 对于没有碰过太多代码，不清楚DSDT表所代表意思的同学来说，修改它实现正确的电量显示简直是一大恶梦。今天通过实例，帮助理解如何修改DSDT，制作属于自己的Maciasl电池补丁。本文基于Rehabman补丁教程、远景一位大佬的补丁教程，整合而成。 警告请注意，本贴只做技术与学习探讨，不做任何商业和违法用途。同时请各位在实践学习后，于24小时内自行消除。 可能涉及到的法律问题：macOS1014； 如果您是非个人用户或用作商业用途，您应该观看上述材料中所提及问题，并不要接触实施下述操作。 说明没有耐心的同学还是建议直接左转淘宝，或者寻找大佬帮你更改，下面的内容不适合完全小白，需要一定的折腾精神和基础。 该补丁需要配合一个Rehabman的一个开源驱动使用，链接在这里。 工具下载：Maciasl（提供的链接为Rehubman GitHub项目地址） 开始呃。。。我没耐心写了，还是放上我收藏的帖子，给各位自行学习吧。。。。emmmmm，实在还是懒。 结束这是远景一位大佬的帖子，我发现这帖子的逻辑顺序已经比较完善，而且附有补充总结知识，非常完善。适合将其彻底搞懂，也适合跳读，直接制作自己的补丁。 值得一提的是，此处可以直接提取DSDT后，直接编辑DSDT/SSDT。不需要iasl进行反编译，建议使用Clover提取DSDT/SSDT。 以下是阅读顺序与说明： 开始学习贴 32位以上拆分贴 总结经验贴 转自yearjinheng，侵权删，感谢yearjinheng。 联系我百度贴吧：我傻你有意见啊远景ID：qiuxiangzhiQQ：1941256841，加我请注明来意","tags":[{"name":"macOS","slug":"macOS","permalink":"https://blog.qiuxiangzhi.top/tags/macOS/"},{"name":"电池补丁","slug":"电池补丁","permalink":"https://blog.qiuxiangzhi.top/tags/%E7%94%B5%E6%B1%A0%E8%A1%A5%E4%B8%81/"}]},{"title":"macOS安装-小白入门","date":"2019-07-15T13:55:00.000Z","path":"2019/07/15/macOS-Guide/","text":"前言该教程我其实已经在贴吧发过一个帖子了，这个帖子在吧里面的反响还不错，估计是因为当时黑果吧太多打广告骗钱的人，导致我这样的帖子也能成为精品。当然，感谢后来的吧主夜白给我加精，他目前在申请多个吧的吧主，祝他成功吧。 但是我认为之前的贴子并不好，不是很系统。毕竟贴吧更多的是想到哪里写到哪里，分享比不上教程详细。所以我打算写一个教程来引导小白入坑，不在本文介绍那些复杂需要折腾的驱动问题。 警告请注意，本贴只做技术与学习探讨，不做任何商业和违法用途。同时请各位在实践学习后，于24小时内自行消除。 在非苹果设备上安装macOS操作系统需要承担一定责任，希望各位明确用途后，仔细思考。作者不提倡读者进行下面的操作，本贴仅供技术参考。 可能涉及到的法律问题：macOS1014； 如果您是非个人用户或用作商业用途，您应该观看上述材料中所提及问题，并不要接触实施下述操作。 资源准备工作 一台电脑，最好是搭载Windows 7及以上的操作系统，推荐Windows 10； 一个不少于4G的U盘，8GB起步；如果安装macOS10.15（Catalina）请使用16G的U盘。 工具软件（DiskGenius专业版，balenaEtcher官方版，微PE官方版）； 原版镜像（这里提供的是黑果小兵的镜像，侵权删）； 解压工具（此处链接的是7-Zip）； 知道如何百度； 知道如何百度是非常重要的一件事情，因为里面涉及到一些概念，这些概念比较不那么专业，但确实也不是很常见，因此需要有一定的百度能力（主要还是有一些小白太懒了，常见诸如如何进BIOS都不愿意去百度了解）。 电脑调试工作 下载或安装好上述软件，其中DiskGenius专业版最好是免安装版的。 打开DiskGenius专业版，右键自己的磁盘（不是分区），查看是否是GPT分区，若不是，需要在PE下转换。 双击微PE.exe，点击右下角生成.iso文件，解压该iso文件到你的（确保它是Fat 32格式并最好转移其他文件）U盘里。 进入BIOS，找到你的BIOS里面的这几个选项，并将其设置成对应状态。主要有：DVMT-Preallocted（&gt;64MB）,Security Boot（disabled），SATA Mode/磁盘模式（AHCI），UEFI启动（纯），CSM（关闭），启动顺序（U盘第一位），保存重启。 进入微PE，找到自己下载的DiskGenius专业版，双击打开。若硬盘格式是MBR，则将该软件挪到U盘里面，再双击打开。右键有操作系统及想安装macOS的磁盘，将其转换成GPT（GUID）格式。 查看将被安装macOS的磁盘，是否存在一个&gt;200MB的EFI分区。若没有，则可删除所有已存在的MSR分区及EFI分区，此时若磁盘最前部的空闲空间&gt;200MB，则可以直接建立EFI（EFI Partition）分区。若仍少于200MB，则右键磁盘此时的第一分区，选择调整磁盘大小，在前部空间分出200MB大小空闲空间，并新建EFI（EFI Partition）分区。 检查好磁盘均是GPT（GUID）格式、（Windows所在磁盘和macOS将安装的所在磁盘上）存在&gt;200MB的EFI分区，确保好这两点之后，点击PE桌面上的Dism++，选择自己的Windows操作系统，选择引导修复，（一般）无脑下一步即可。 【GZ小白】注意事项：转换为GUID格式，会删除该硬盘的扩展分区 电脑准备工作完成。 安装调试过程 打开balenaEtcher，插入U盘，按照提示操作，选择下载好的镜像进行烧录。 烧录好后可以有两种选择，一步一步继续往下走或者直接跳转到第6步，（若下载的镜像为我推荐的则）两种方式都可以完成安装，推荐一步一步走。 在这里找到你的机型或类似配置的EFI，下载备用。若找不到请直接跳第6步操作。 打开DiskGenius软件，将U盘EFI分区内的所有文件删除，并使用Ctrl+V的快捷键方式将下载的EFI文件夹粘贴进去。注意，EFI文件夹下若还有一个EFI文件夹，存在嵌套情况，请直接将最里层的EFI复制进U盘的EFI分区。 检查EFI/CLOVER/ACPI/Patched/，若存在DSDT文件，直接删除。 重启，选择U盘作为第一启动项，选择Boot macOS install from macOS Mojave installation（macOS图标那一项），如果你没有更换原有EFI，接着就是跑代码过程了。如果更换过了EFI，那么在移动到安装项之后，按下空格键，同样空格选择-v，再ESC回到原有界面安装即可。 若启动不顺利，碰到直接重启，卡死在某一界面，我的建议是：安装时候进行录像，将卡死或者导致重启的代码截图出来，在群里寻求帮助。当然，我更加推荐前往远景论坛查贴或者直接百度卡死代码解决这些问题。 若一切安装顺利，则它将进入安装界面。在安装界面选择磁盘工具，将预安装分区抹除成HFS分区，也即日志式，若你是固态硬盘，也可选择apfs。磁盘名字自己任意给定，白果磁盘名字为Macintosh HD，尽量避免这个名字。 接下来就可以进行安装了，一路下一步，选择自己刚刚命名的磁盘安装，等待安装完成。 安装完成会重启回到引导界面，此时选择Boot macOS install From 【你自己起的磁盘名字】，空格同样可以选择代码模式。进入第二次安装，此时不需要手动操作，等待安装完成重启即可。 此时回到引导界面应是已经安装完成，选择Boot macOS From 【你自己起的磁盘名字】，进入设置界面，接下来等着你的就是macOS的全新体验了。 macOS、Windows 双引导在安装完成之后，要做的就是进行引导的设置。 有两种设置引导的方式，此处推荐使用的是PE进行引导的建立，也介绍Windows下设置引导的方法介绍。 Windows环境下完成引导的设置。 在Windows下设置引导需要借助软件完成，软件名称及官网下载[**在这里**](https://www.easyuefi.com/index-us.html)。该软件我们需要的是企业版，普通版本没有添加引导的功能，注意甄别。 下载完软件后，先打开DiskGenius，将U盘里面的ESP（EFI）分区中Clover文件夹整个复制到桌面。再通过Ctrl+V的方式，粘贴在Windows启动磁盘的ESP分区中EFI文件夹下。 （Windows、macOS在不同磁盘下时）也可以复制整个EFI文件夹到macOS所在磁盘的ESP分区。 新手小白建议前述操作。 接下来打开easyUEFI，选择新建引导项，引导类型选择“Linux或其他”，名称只能输入英文，可随意填写。选择你所放引导的ESP分区，找到Clover文件夹下的CLOVERX64.efi文件，选中完成即可。 【GZ小白】注意事项：如果未看到CLOVER.efi文件（EasyUEFI下），请重启电脑即可看到 PE下完成引导的设置。 进入PE，然后同样，打开DiskGenius，将**U盘里面的ESP（EFI）分区中Clover**文件夹整个复制到桌面。再**通过Ctrl+V**的方式，粘贴在**Windows启动磁盘的ESP分区中EFI文件夹**下。 （Windows、macOS在不同磁盘下时）也可以复制整个EFI文件夹到macOS所在磁盘的ESP分区。 新手小白建议前述操作。 此处的引导建立使用Bootice这款软件，选择引导，UEFI设置。引导文件同样选择CLOVERX64.efi，名称随意，选择粘贴了引导文件的分区。 安装过程常见问题解答 抹除时出现“磁盘空间不足，无法完成操作”怎么办？ 答：这是你在**电脑调试阶段**中，给ESP分区空间预留不足200MB，需要重新操作，将空间扩大。 怎么才知道我的磁盘是不是GPT格式呢？ 答：当你在DiskGenius专业版软件中，右键该磁盘时，若“转换到GUID格式”为**灰色不可选中**，则表示该磁盘格式为GPT。 为什么我在安装的时候找不到我的硬盘？ 答：若为三星的PM981或者PM981a，或者其他的出名不可安装macOS（百度可以知道是否难以安装）的硬盘，建议小白放弃。愿意折腾的话可以查看这篇我的[**PM981安装教程**](http://bbs.pcbeta.com/viewthread-1814806-1-1.html)（发布在远景），不保证在所有机型上稳定。 若不是上述硬盘，则我建议更新clover版本，对小白最简单的方式是，更换镜像版本或者镜像源。 BIOS设置时找不到一模一样的选项怎么办？ 答：并不是所有的BIOS都有我所提到的选项名称，这很正常。你需要找到意思相近的名称项，设置好就可以。如有的BIOS将**Security Boot**叫做**Security/安全启动**，名称变化很正常。**只有DVMT Pre-allocated项**，大部分笔记本BIOS会选择隐藏，可以不用纠结。其余选项都应存在你的BIOS中，并需要设置好。 安装时，-v滚代码卡apfs_moudle_start怎么办（一般是10.15的问题）【GZ小白】 答：打补丁如下Comment Find*[HEX] Replace[HEX]change EC0 to EC 4543305f 45435f5fchange H_EC to EC 485f4543 45435f5fchange ECDV to EC 45434456 45435f5f 一般只需选第一条加粗补丁即可 安装10.15时，卡VoodooPS2Controller怎么办(一般是10.15的问题)【GZ小白】 到EFI/CLOVER/kexts/others/目录下，删除VoodooPS2Controller.kexts 其他我希望各位小白，在明确步骤后，可以通过自己百度、找帖子之后解决掉大部分问题，之后才是找大神寻求帮助。 我比较推荐以下方式问问题： 这个我应该怎么做？Not 大神帮我搞定！ 这个在哪里有具体操作？Not 大神帮我搞定！ 帮完忙，比较喜欢这种回复： 我知道了，谢谢你！Not 好/嗯/哦。 如果希望别人帮你安装，自己不想动手不想研究的话，希望你还是左转淘宝或者别接触黑苹果以及玩黑果的人，白嫖可耻，时间宝贵。 感谢感谢QQ群：706372078里的管理员【GZ小白】修改补充教程，也欢迎其他人一起补充及完善教程。 【GZ小白】：3467365604 联系我百度贴吧：我傻你有意见啊远景ID：qiuxiangzhiQQ：1941256841，加我请注明来意","tags":[{"name":"macOS","slug":"macOS","permalink":"https://blog.qiuxiangzhi.top/tags/macOS/"},{"name":"安装","slug":"安装","permalink":"https://blog.qiuxiangzhi.top/tags/%E5%AE%89%E8%A3%85/"}]}]